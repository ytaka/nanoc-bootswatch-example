#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

# 
# * Fri Jan  2 12:06:42 2015
#   Compressor with sprockets filter of nanoc-sprockets3 does not work.
#   Alternatively, we compress JS and CSS files by yuicompressor.
# 
# compile %r{/assets/(stylesheets|javascripts)/application.*} do
#   filter :sprockets, {
#     :css_compressor => :sass,
#     :js_compressor  => Uglifier.new(:comments => :copyright)
#   }
#   snapshot :text
#   filter :gzip
# end

compile %r{/assets/javascripts/application.*} do
  filter :sprockets
  filter :uglify_js
  snapshot :text
  filter :gzip
end

compile %r{/assets/stylesheets/application.*} do
  filter :sprockets
  filter :yui_compressor, :type => :css
  snapshot :text
  filter :gzip
end

compile %r{/assets/(stylesheets|javascripts)/.+} do
end

route %r{/assets/(stylesheets|javascripts)/application.*}, :snapshot => :text do
  Nanoc::Sprockets::Helper.asset_path(item)
end

route %r{/assets/(stylesheets|javascripts)/application.*} do
  Nanoc::Sprockets::Helper.asset_path(item) + ".gz"
end

route %r{/assets/(stylesheets|javascripts)/.*} do
  nil
end

route %r{/assets/(images|fonts)/.*} do
  Nanoc::Sprockets::Helper.asset_path(item)
end

compile '*' do
  if item.binary?
    # don't filter binary items
  else
    item[:extension].split(".").reverse.each do |ext|
      case ext
      when /(^|\.)md$/
        filter :kramdown
      when /(^|\.)haml$/
        filter :haml
      when /(^|\.)erb$/
        filter :erb
      end
    end
    layout item[:layout] || "default"
    snapshot :text
    filter :gzip
  end
end

route '*', :snapshot => :text do
  item.identifier + 'index.html'
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html' + ".gz"
  end
end

layout '*', :haml
